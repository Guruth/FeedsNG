<?xml version="1.0" ?>
<SmellBaseline>
    <ManuallySuppressedIssues></ManuallySuppressedIssues>
    <CurrentIssues>
        <ID>ComplexMethod:FeverAPIHandler.kt$FeverAPIHandler$private suspend fun feverHandler(request: ServerRequest):
            ServerResponse
        </ID>
        <ID>ForbiddenComment:FeedControlService.kt$FeedControlService$// TODO: Move Feed to Group</ID>
        <ID>ForbiddenComment:FeedControlServiceImpl.kt$FeedControlServiceImpl$// TODO: Add check if the ip is an
            internet address
        </ID>
        <ID>ForbiddenComment:FeedFetcherService.kt$FeedFetcherService$// TODO: Return typed error -&gt; XML Parse Error
            / HTTP Error
        </ID>
        <ID>ForbiddenComment:FeverModel.kt$FeverResponse.Builder$// TODO: A deferred Builder? Takes only Deferred and
            awaits on build...
        </ID>
        <ID>ForbiddenComment:RomeFeedFetcherServiceImpl.kt$RomeFeedFetcherServiceImpl$// TODO: Some feeds link images
            relative to their origin, content references a xml:base="https://kottke.org/"
        </ID>
        <ID>ForbiddenComment:UserControlServiceImpl.kt$UserControlServiceImpl$// TODO: Limit number of invite codes?
        </ID>
        <ID>ForbiddenComment:WebConfiguration.kt$WebConfiguration$// TODO: delete session cookie</ID>
        <ID>LongMethod:AbstractFeedRepositoryTest.kt$AbstractFeedRepositoryTest$@Test fun `getAllFeedItemsOfUser,
            insertFeed, insertFeedItem, updateUserFeedItem`()
        </ID>
        <ID>LongMethod:FeverAPIHandler.kt$FeverAPIHandler$private suspend fun feverHandler(request: ServerRequest):
            ServerResponse
        </ID>
        <ID>MagicNumber:FeedUpdateServiceImpl.kt$FeedUpdateConfiguration$10</ID>
        <ID>MagicNumber:FeedUpdateServiceImpl.kt$FeedUpdateConfiguration$5</ID>
        <ID>MagicNumber:ReaderPageHandler.kt$MustacheHandler$15</ID>
        <ID>MagicNumber:ReaderPageHandler.kt$MustacheHandler$3</ID>
        <ID>MagicNumber:ReaderPageHandler.kt$MustacheHandler$5</ID>
        <ID>MagicNumber:RomeFeedFetcherServiceImpl.kt$RomeFeedDetails$120</ID>
        <ID>MagicNumber:RomeFeedFetcherServiceImpl.kt$RomeFeedDetails$8</ID>
        <ID>MagicNumber:RomeFeedFetcherServiceImpl.kt$RomeFeedFetcherServiceImpl$10</ID>
        <ID>MagicNumber:UserControlServiceImpl.kt$UserControlServiceImpl$4</ID>
        <ID>MagicNumber:UserControlServiceImpl.kt$UserControlServiceImpl$8</ID>
        <ID>MatchingDeclarationName:AccountHandler.kt$AccountHandlerHandler : WebRequestHandler</ID>
        <ID>MatchingDeclarationName:FeedsNGApplication.kt$FeedsNgApplication</ID>
        <ID>MatchingDeclarationName:ReaderPageHandler.kt$MustacheHandler : WebRequestHandler</ID>
        <ID>MatchingDeclarationName:RomeOPMLFeedImporterImpl.kt$RomeOPMLFeedImportServiceImpl : FeedImportService</ID>
        <ID>MaxLineLength:FeedQueryServiceImpl.kt$FeedQueryServiceImpl$logger.trace("Getting $limit with offset $offset
            UserFeedItems of feeds $feedIdList with feedItemFilter $feedItemIdFilter of user $userId")
        </ID>
        <ID>MaxLineLength:FeedUpdateServiceImpl.kt$FeedUpdateServiceImpl$logger.info("Starting to update feeds every
            ${feedUpdateConfiguration.updateInterval}ms in ${feedUpdateConfiguration.initialDelay}ms")
        </ID>
        <ID>MaxLineLength:FeverModel.kt$FeverFavIcon$// base64 encoded image data; prefixed by image type
            "image/gif;base64,R0lGODlhAQABAIAAAObm5gAAACH5BAEAAAAALAAAAAABAAEAAAICRAEAOw=="
        </ID>
        <ID>MaxLineLength:H2FeedRepository.kt$H2FeedRepository$.</ID>
        <ID>MaxLineLength:H2FeedRepository.kt$H2FeedRepository$private</ID>
        <ID>MaxLineLength:H2UserRepository.kt$H2UserRepository$.</ID>
        <ID>MaxLineLength:H2UserRepository.kt$H2UserRepository$client.sql("SELECT id, username, password_hash,
            fever_api_key_hash FROM FEEDSNG.account WHERE fever_api_key_hash = :feverAPIKeyHash")
        </ID>
        <ID>MaxLineLength:H2UserRepository.kt$H2UserRepository$client.sql("SELECT id, username, password_hash,
            fever_api_key_hash FROM FEEDSNG.account WHERE username = :username")
        </ID>
        <ID>MaxLineLength:PostgresFeedRepository.kt$PostgresFeedRepository$.</ID>
        <ID>MaxLineLength:PostgresFeedRepository.kt$PostgresFeedRepository$private</ID>
        <ID>
            MaxLineLength:PostgresFeedRepositoryTest.kt$PostgresFeedRepositoryTest.PostgresInitializer$"spring.flyway.url=jdbc:postgresql://${postgresContainer.host}:${postgresContainer.getMappedPort(5432)}/${postgresContainer.databaseName}"
        </ID>
        <ID>
            MaxLineLength:PostgresFeedRepositoryTest.kt$PostgresFeedRepositoryTest.PostgresInitializer$"spring.r2dbc.url=r2dbc:postgresql://${postgresContainer.host}:${postgresContainer.getMappedPort(5432)}/${postgresContainer.databaseName}"
        </ID>
        <ID>MaxLineLength:PostgresUserRepository.kt$PostgresUserRepository$client.sql("SELECT id, username,
            password_hash, fever_api_key_hash FROM FEEDSNG.account WHERE fever_api_key_hash = :feverAPIKeyHash")
        </ID>
        <ID>MaxLineLength:PostgresUserRepository.kt$PostgresUserRepository$client.sql("SELECT id, username,
            password_hash, fever_api_key_hash FROM FEEDSNG.account WHERE username = :username")
        </ID>
        <ID>MaxLineLength:PostgresUserRepository.kt$PostgresUserRepository$return</ID>
        <ID>
            MaxLineLength:PostgresUserRepositoryTest.kt$PostgresUserRepositoryTest.PostgresInitializer$"spring.flyway.url=jdbc:postgresql://${postgresContainer.host}:${postgresContainer.getMappedPort(5432)}/${postgresContainer.databaseName}"
        </ID>
        <ID>
            MaxLineLength:PostgresUserRepositoryTest.kt$PostgresUserRepositoryTest.PostgresInitializer$"spring.r2dbc.url=r2dbc:postgresql://${postgresContainer.host}:${postgresContainer.getMappedPort(5432)}/${postgresContainer.databaseName}"
        </ID>
        <ID>NestedBlockDepth:FeverAPIHandler.kt$FeverAPIHandler$private suspend fun feverHandler(request:
            ServerRequest): ServerResponse
        </ID>
        <ID>NestedBlockDepth:RomeOPMLFeedImporterImpl.kt$RomeOPMLFeedImportServiceImpl$private fun
            Reader.toFeedImport(): Result&lt;FeedImport, String&gt;
        </ID>
        <ID>NewLineAtEndOfFile:AbstractFeedRepositoryTest.kt$sh.weller.feedsng.database.AbstractFeedRepositoryTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:AbstractUserRepositoryTest.kt$sh.weller.feedsng.database.AbstractUserRepositoryTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:AccountHandler.kt$sh.weller.feedsng.web.ui.AccountHandler.kt</ID>
        <ID>NewLineAtEndOfFile:FeedControlServiceImplTest.kt$sh.weller.feedsng.feed.impl.FeedControlServiceImplTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:FeedImportService.kt$sh.weller.feedsng.feed.api.required.FeedImportService.kt</ID>
        <ID>NewLineAtEndOfFile:FeedQueryService.kt$sh.weller.feedsng.feed.api.provided.FeedQueryService.kt</ID>
        <ID>NewLineAtEndOfFile:FeedQueryServiceImpl.kt$sh.weller.feedsng.feed.impl.FeedQueryServiceImpl.kt</ID>
        <ID>NewLineAtEndOfFile:FeedRepository.kt$sh.weller.feedsng.feed.api.required.FeedRepository.kt</ID>
        <ID>NewLineAtEndOfFile:FeedUpdateServiceImpl.kt$sh.weller.feedsng.feed.impl.FeedUpdateServiceImpl.kt</ID>
        <ID>NewLineAtEndOfFile:FeedUpdateServiceImplTest.kt$sh.weller.feedsng.feed.impl.FeedUpdateServiceImplTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:FeverAPIHandlerTest.kt$sh.weller.feedsng.web.fever.FeverAPIHandlerTest.kt</ID>
        <ID>NewLineAtEndOfFile:FeverModel.kt$sh.weller.feedsng.web.fever.FeverModel.kt</ID>
        <ID>NewLineAtEndOfFile:H2FeedRepositoryTest.kt$sh.weller.feedsng.database.h2.H2FeedRepositoryTest.kt</ID>
        <ID>NewLineAtEndOfFile:H2RepositorySupport.kt$sh.weller.feedsng.database.h2.H2RepositorySupport.kt</ID>
        <ID>NewLineAtEndOfFile:H2UserRepository.kt$sh.weller.feedsng.database.h2.H2UserRepository.kt</ID>
        <ID>NewLineAtEndOfFile:H2UserRepositoryTest.kt$sh.weller.feedsng.database.h2.H2UserRepositoryTest.kt</ID>
        <ID>
            NewLineAtEndOfFile:JsonAuthenticationWebFilter.kt$sh.weller.feedsng.web.support.JsonAuthenticationWebFilter.kt
        </ID>
        <ID>NewLineAtEndOfFile:MustacheSupport.kt$sh.weller.feedsng.web.ui.MustacheSupport.kt</ID>
        <ID>
            NewLineAtEndOfFile:PostgresFeedRepositoryTest.kt$sh.weller.feedsng.database.postgres.PostgresFeedRepositoryTest.kt
        </ID>
        <ID>
            NewLineAtEndOfFile:PostgresRepositorySupport.kt$sh.weller.feedsng.database.postgres.PostgresRepositorySupport.kt
        </ID>
        <ID>NewLineAtEndOfFile:PostgresUserRepository.kt$sh.weller.feedsng.database.postgres.PostgresUserRepository.kt
        </ID>
        <ID>
            NewLineAtEndOfFile:PostgresUserRepositoryTest.kt$sh.weller.feedsng.database.postgres.PostgresUserRepositoryTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:ReaderPageHandler.kt$sh.weller.feedsng.web.ui.ReaderPageHandler.kt</ID>
        <ID>NewLineAtEndOfFile:RegisterHandler.kt$sh.weller.feedsng.web.ui.RegisterHandler.kt</ID>
        <ID>NewLineAtEndOfFile:RepositorySupport.kt$sh.weller.feedsng.database.RepositorySupport.kt</ID>
        <ID>NewLineAtEndOfFile:Result.kt$sh.weller.feedsng.common.Result.kt</ID>
        <ID>NewLineAtEndOfFile:RomeFeedFetcherServiceImpl.kt$sh.weller.feedsng.feed.rome.RomeFeedFetcherServiceImpl.kt
        </ID>
        <ID>
            NewLineAtEndOfFile:RomeFeedFetcherServiceImplTest.kt$sh.weller.feedsng.feed.rome.RomeFeedFetcherServiceImplTest.kt
        </ID>
        <ID>
            NewLineAtEndOfFile:RomeOPMLFeedImportServiceImplTest.kt$sh.weller.feedsng.feed.rome.RomeOPMLFeedImportServiceImplTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:StartupService.kt$sh.weller.feedsng.startup.StartupService.kt</ID>
        <ID>NewLineAtEndOfFile:UserControlService.kt$sh.weller.feedsng.user.api.provided.UserControlService.kt</ID>
        <ID>NewLineAtEndOfFile:UserControlServiceImplTest.kt$sh.weller.feedsng.user.impl.UserControlServiceImplTest.kt
        </ID>
        <ID>NewLineAtEndOfFile:UserDetailsServiceImpl.kt$sh.weller.feedsng.web.support.UserDetailsServiceImpl.kt</ID>
        <ID>NewLineAtEndOfFile:UserEntities.kt$sh.weller.feedsng.user.api.provided.UserEntities.kt</ID>
        <ID>NewLineAtEndOfFile:UserQueryServiceImpl.kt$sh.weller.feedsng.user.impl.UserQueryServiceImpl.kt</ID>
        <ID>NewLineAtEndOfFile:UserRepository.kt$sh.weller.feedsng.user.api.required.UserRepository.kt</ID>
        <ID>NewLineAtEndOfFile:WelcomePageHandler.kt$sh.weller.feedsng.web.ui.WelcomePageHandler.kt</ID>
        <ID>ReturnCount:AccountHandler.kt$AccountHandlerHandler$private suspend fun generateInviteCode(request:
            ServerRequest): ServerResponse
        </ID>
        <ID>ReturnCount:FeedControlServiceImpl.kt$FeedControlServiceImpl$override suspend fun addFeed(userId: UserId,
            feedUrl: String): Result&lt;FeedId, String&gt;
        </ID>
        <ID>ReturnCount:FeedControlServiceImpl.kt$FeedControlServiceImpl$private suspend fun
            getFeedByURLOrFetchAndInsert(feedUrl: String): Result&lt;FeedId, String&gt;
        </ID>
        <ID>ReturnCount:FeverAPIHandler.kt$FeverAPIHandler$private suspend fun feverHandler(request: ServerRequest):
            ServerResponse
        </ID>
        <ID>ReturnCount:JsonAuthenticationWebFilter.kt$JsonAuthenticationWebFilter$private fun authenticate(exchange:
            ServerWebExchange): Mono&lt;Authentication&gt;
        </ID>
        <ID>ReturnCount:ReaderPageHandler.kt$MustacheHandler$private suspend fun addFeed(request: ServerRequest):
            ServerResponse
        </ID>
        <ID>ReturnCount:RomeFeedFetcherServiceImpl.kt$RomeFeedFetcherServiceImpl$override suspend fun
            fetchFeedDetails(feedUrl: String): Result&lt;FeedDetails, String&gt;
        </ID>
        <ID>ReturnCount:RomeFeedFetcherServiceImpl.kt$RomeFeedFetcherServiceImpl$private suspend fun
            getFeedBytes(feedUrl: String): Result&lt;WebclientResponse, String&gt;
        </ID>
        <ID>ReturnCount:UserControlServiceImpl.kt$UserControlServiceImpl$@Transactional override suspend fun
            createUser(username: String, password: String, inviteCode: String): CreateUserResult
        </ID>
        <ID>ReturnCount:UserControlServiceImpl.kt$UserControlServiceImpl$override suspend fun createUser(username:
            String, password: String): CreateUserResult
        </ID>
        <ID>ReturnCount:UserControlServiceImpl.kt$UserControlServiceImpl$private fun isPasswordInvalid(password:
            String): Boolean
        </ID>
        <ID>ReturnCount:UserControlServiceImpl.kt$UserControlServiceImpl$private fun isUsernameInvalid(username:
            String): Boolean
        </ID>
        <ID>SpreadOperator:FeedControlServiceImpl.kt$FeedControlServiceImpl$(*it.groupData.feeds.toTypedArray())</ID>
        <ID>SpreadOperator:FeedsNGApplication.kt$(*args)</ID>
        <ID>TooGenericExceptionCaught:FeedControlServiceImpl.kt$FeedControlServiceImpl$e: Exception</ID>
        <ID>TooGenericExceptionCaught:RomeFeedFetcherServiceImpl.kt$RomeFeedFetcherServiceImpl$e: Exception</ID>
        <ID>TooManyFunctions:FeedRepository.kt$FeedRepository</ID>
        <ID>TooManyFunctions:FeverAPIHandler.kt$FeverAPIHandler : WebRequestHandler</ID>
        <ID>TooManyFunctions:H2FeedRepository.kt$H2FeedRepository : FeedRepository</ID>
        <ID>TooManyFunctions:PostgresFeedRepository.kt$PostgresFeedRepository : FeedRepository</ID>
        <ID>TooManyFunctions:RepositorySupport.kt$sh.weller.feedsng.database.RepositorySupport.kt</ID>
        <ID>UnusedPrivateMember:FeedControlServiceImpl.kt$FeedControlServiceImpl$val url = runCatching { URL(feedUrl)
            }.getOrElse { return true }
        </ID>
        <ID>UnusedPrivateMember:FeedUpdateServiceImpl.kt$FeedUpdateServiceImpl$tick</ID>
        <ID>UnusedPrivateMember:FeverModel.kt$FeverResponse.Companion$private val logger: Logger =
            LoggerFactory.getLogger(FeverResponse::class.java)
        </ID>
        <ID>UnusedPrivateMember:RomeFeedFetcherServiceImpl.kt$RomeFeedDetails$private fun
            SyndEntry.getFeedItemCreatedTimestamp(): Instant
        </ID>
        <ID>UnusedPrivateMember:StartupService.kt$StartupService$private val userQueryService: UserQueryService</ID>
        <ID>WildcardImport:AccountHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
        <ID>WildcardImport:FeedControlServiceImpl.kt$import kotlinx.coroutines.flow.*</ID>
        <ID>WildcardImport:FeedControlServiceImpl.kt$import sh.weller.feedsng.common.*</ID>
        <ID>WildcardImport:FeedControlServiceImpl.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:FeedQueryServiceImpl.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:FeedRepository.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:FeedUpdateServiceImpl.kt$import kotlinx.coroutines.*</ID>
        <ID>WildcardImport:FeverAPIHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
        <ID>WildcardImport:FeverAPIHandler.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:FeverModel.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:H2FeedRepository.kt$import kotlinx.coroutines.flow.*</ID>
        <ID>WildcardImport:H2FeedRepository.kt$import org.springframework.r2dbc.core.*</ID>
        <ID>WildcardImport:H2FeedRepository.kt$import sh.weller.feedsng.database.*</ID>
        <ID>WildcardImport:H2FeedRepository.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:H2UserRepository.kt$import org.springframework.r2dbc.core.*</ID>
        <ID>WildcardImport:LoginPageHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
        <ID>WildcardImport:PostgresFeedRepository.kt$import kotlinx.coroutines.flow.*</ID>
        <ID>WildcardImport:PostgresFeedRepository.kt$import org.springframework.r2dbc.core.*</ID>
        <ID>WildcardImport:PostgresFeedRepository.kt$import sh.weller.feedsng.database.*</ID>
        <ID>WildcardImport:PostgresFeedRepository.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:PostgresUserRepository.kt$import org.springframework.r2dbc.core.*</ID>
        <ID>WildcardImport:ReaderPageHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
        <ID>WildcardImport:ReaderPageHandler.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:RegisterHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
        <ID>WildcardImport:RepositorySupport.kt$import sh.weller.feedsng.feed.api.provided.*</ID>
        <ID>WildcardImport:RomeFeedFetcherServiceImpl.kt$import kotlinx.coroutines.flow.*</ID>
        <ID>WildcardImport:WelcomePageHandler.kt$import org.springframework.web.reactive.function.server.*</ID>
    </CurrentIssues>
</SmellBaseline>
